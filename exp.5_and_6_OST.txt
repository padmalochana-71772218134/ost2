1) IF ELSE IF ELSE:

val num=6
if(num%2==0 && num%3==0){
println("The number is divided by both 2 and 3" )
}else if(num%2==0){
println("the number is divided by 2")
}else if(num%3==0){
println("the number is divided by 3")
}else{
println("the number is not divided by both 2 and 3")
}

2.LOOPING STATEMENT:

*FOR LOOP:
for(i<-1 to 5){
println(s"the number is:$i")
}

*WHILE LOOP:
var i=5
while(i>0){
println(s"the number is :$i")
i-=1
}

*DO WHILE:
var number = 1
do {
  println(s"Number: $number")
  number += 1 // Increment the number
} while (number <= 5)

3.PATTERN MATCHING :

val input: Any = "Hello" 

input match {
  case s: String => println(s"The input is a string: $s")
  case i: Int    => println(s"The input is an integer: $i")
  case b: Boolean => println(s"The input is a boolean: $b")
  case _ => println("Unknown type")
}

4.EXCEPTION HANDLING :

def divide(a: Int, b: Int): Int = {
  try {
    val result = a / b
    println(s"The result of $a divided by $b is: $result")
    result
  } catch {
    case e: ArithmeticException => 
      println("Error: Division by zero is not allowed.")
      0 // Return a default value
  }
}

divide(10, 2) 
divide(10, 0) 

5.METHOD CREATION:

def calculateArea(length: Double, width: Double): Double = {
  length * width
}

val length = 5.0
val width = 3.0
val area = calculateArea(length, width)

println(s"The area of the rectangle is: $area")

6.CURRYING:

// Define a curried function
def multiply(a: Int)(b: Int): Int = a * b

// Call the curried function
val result1 = multiply(5)(3)  // Output: 15

// Partially apply the curried function
val multiplyBy2 = multiply(2) _

val result2 = multiplyBy2(4)  // Output: 8

println(result1) // Output: 15
println(result2) // Output: 8

8.EXPRESSION:

// Define an expression using if-else
val x = 10
val result = if (x > 5) "Greater" else "Smaller"
println(result)  // Output: Greater

9.ANONYMOUS FUNCTIONS:

// Anonymous function (lambda) to add two numbers
val add = (x: Int, y: Int) => x + y

// Call the anonymous function
println(add(3, 4))  // Output: 7

EXAMPLE:
val base = 10

// Closure capturing base
val addBase = (x: Int) => x + base

// Curried function
def multiply(a: Int)(b: Int): Int = a * b

// Anonymous function (lambda)
val subtract = (a: Int, b: Int) => a - b

// Expression
val result = if (base > 5) "Base is large" else "Base is small"

// Testing everything
println(addBase(5))           // Output: 15
println(multiply(3)(4))       // Output: 12
println(subtract(10, 3))      // Output: 7
println(result)               // Output: Base is large


